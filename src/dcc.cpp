#include <stdio.h>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include "ast.hpp"
#include "tangent_linear_code.hpp"
#include "adjoint_code_joint.hpp"

using namespace std;

extern void lexinit(FILE*);
extern void yyparse();

// internal representation is global
ast the_ast;

// prefixes for auxiliary variables generated by compiler
string tl_var_prefix, adj_var_prefix, sac_var_prefix;
// sizes of stacks
string css, fdss, idss;
// prefixes for output file names
string tl_file_prefix, adj_file_prefix;
// names of stacks and associated counters
string cs, csc, fds, fdsc, ids, idsc;

string amode_var_name;

int main(int argc, char* argv[])
{
  int diff_mode; 
  string diff_order; 
  string sac_var_base; 

  diff_mode=atoi(argv[2]);
  diff_order=argv[3];
  amode_var_name = "a" + diff_order + "_mode";
  sac_var_prefix = "v" + diff_order + "_";
  cs="cs"; css="1000000"; csc="cs_c"; 
  fds="fds"; fdss="1000000"; fdsc="fds_c"; 
  ids="ids"; idss="1000000"; idsc="ids_c"; 

  // open source file
  FILE *source_file = fopen(argv[1],"r");
  // parse
  lexinit(source_file);
  yyparse();
  // close source file
  fclose(source_file);

  if (diff_mode==1) { // build tangent linear code
      tl_var_prefix = "t" + diff_order + "_";
      tl_file_prefix = tl_var_prefix;
      string outfile_name=tl_file_prefix+argv[1];
      tangent_linear_code tlc;
      tlc.build(outfile_name);
  }
  else if (diff_mode==2) { // build adjoint code (joint mode)
      adj_var_prefix = "a" + diff_order + "_";
      adj_file_prefix = adj_var_prefix;
      string outfile_name=adj_file_prefix+argv[1];
      adjoint_code_joint ac;
      ac.build(argv[1],outfile_name);
  }
  return 0;
}
